<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[spring相关知识]]></title>
    <url>%2F2018%2F11%2F19%2Fspring%2F</url>
    <content type="text"><![CDATA[web应用这里先说一下web应用的一般加载顺序，先放出一张web.xml的样例 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:web=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot; version=&quot;2.5&quot;&gt; &lt;!-- spring的配置文件 --&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;filter&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;!-- spring mvc核心：分发servlet --&gt; &lt;servlet&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- spring mvc的配置文件 --&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;mvc-dispatcher&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 当一个web项目放到tomcat中的时候，tocat默认会去读取该项目webapp下的web.xml文件，先加载节点信息，转换为键值对，并交给servletContext（servlet上下文，web项目所有部分都将共享这个上下文）,以便listen和filter等在初始化的时候用到这些上下文信息 1234&lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;&lt;/context-param&gt; 然后创建listener中的类实例，创建监听器 123&lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt; 加载filter和servlet 在加载servlet的时候可以指定通过load- on-startup属性来设置servlet的加载顺序，它的值必须是一个整数（如果被设置负数或者没有设置load- on-startup属性，则会在servlet被调用的时候才加载该servlet） spring加载（容器启动流程）由web应用加载的过程我们可以得知，在web.xml加载的时候会去加载该listener 123&lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;&lt;/listener&gt; 查看该类可知ContextLoaderListener继承ContextLoader ContextLoaderListener.java ContextLoader.java ==其中staic静态代码块会在类加载的时候就会执行，该类会去查找一个ContextLoader.properties的文件并加载，有兴趣的的可以debug进去看一下（注意类加载和实例化时代码块执行的顺序）== 再看回ContextLoaderListener，debug一下可知当java容器启动时会触发该类的contextInitialized方法（这里我就不截图了），该contextInitialized方法里会调用父类的initWebApplicationContext方法，具体执行步骤为： java容器启动触发ContextLoaderListener的contextInitialized contextInitialized 方法调用ContextLoader的initWebApplicationContext方法 initWebApplicationContext调用createWebApplicationContext方法 createWebApplicationContext 调用determineContextClass方法 determineContextClass有如下代码1contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName()); 可以得知是从defaultStrategies中加载的，而defaultStrategies在staic代码块执行的时候就已经初始化进去了，所以determineContextClass返回应该是ContextLoader.properties中的XmlWebApplicationContext。 回到 initWebApplicationContext 方法，调用configureAndRefreshWebApplicationContext方法 configureAndRefreshWebApplicationContext 调用了AbstractApplicationContext的refresh方法 refresh 方法调用了obtainFreshBeanFactory obtainFreshBeanFactory 调用了AbstractRefreshableApplicationContext类的refreshBeanFactory方法 refreshBeanFactory调用了XmlWebApplicationContext的loadBeanDefinitions loadBeanDefinitions中加载了对应的applicationContext.xml 其中7-11不步我就没有一步一步debug进去看了，有兴趣的可以亲自debug进去看一看程序执行流程，其中initWebApplicationContext这个方法主要做三件事 创建WebApplicationContext，通过createWebApplicationContext()方法 加载spring配置文件，并创建beans。通过configureAndRefreshWebApplicationContext()方法 将spring容器context挂载到ServletContext 这个web容器上下文中。通过servletContext.setAttribute()方法。 容器启动流程图spring容器初始化 创建WebApplicationContext对象流程 读取XML流程==看源码看的有些恶心了，剩下的留着下次继续看== spring XML配置文件解析spring bean创建和初始化]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux操作笔记]]></title>
    <url>%2F2018%2F11%2F19%2Flinux%2F</url>
    <content type="text"><![CDATA[linux常见命令linux客户端工具：强力推荐mobaXterm ctrl+c强行终止当前程序 ctrl+d退出终端 ctrl+s暂停当前程序，按任意键继续 touch test.txt 创建文件 touch love_{1..10}_linux.txt 创建多个文件 sudo adduser lilei 创建一个名为lilei的用户 su -l lilei 切换用户 ctrl+d 退出当前用户 sudo deluser lilei –remove-home 删除用户 sudo chown shiyanlou iphone6 将iphone6的文件所有者更换为shiyanlourf ls -l 使用较长格式列出文件 ls -lh 使用较长格式列出文件 ls -A 显示所有文件（包括隐藏文件） ll iphone6 查看iphone6文件信息 chmod go-rwx iphone6 g、o、u、分别表示group、others、user,+、-分别表示增加和去掉相应的权限（修改文件的读写权限） pwd 查看当前所在路径 cd ..进入上级目录 cd ~进入home目录 mkdir mkdir 创建新目录 mkdir -p father/son/grandson 同时创建父级目录 cp test father/son/grandson 将test文件复制到相应文件夹中 cp -r father father family 将father文件夹复制到family文件夹中 rm test 删除test文件 rm -f test 强制删除test文件 rm -r family 删除目录 mv file1 Documents 将file1文件移动到Documents目录下 mv file1 myfile 将file1重命名为myfile cat file 查看file文件内容 cat -n file 查看file文件内容（带行号） nl file 带行号的文件内容打印 file file 查看file文件类型 nohup xeyes &amp; 召唤眼睛 sudo apt-get update;sudo apt-get install cmatrix 安装Ubuntu cmatrix 召唤数字雨 sudo apt-get update;sudo apt-get install libaa-bin aafire 召唤火焰 ./file 执行file文件 PATH=$PATH:/home/shiyanlou/mybin 添加自定义路径到环境变量（当前shell有效） echo “PATH=$PATH:home/shiyanlou/mybin” &gt;&gt; .zshrc 添加自定义路径到环境变量（全局） echo $path 查看变量path的值 path=${path%/home/shiyanlou/mybin} 删除/home/shiyanlou/mybin temp=${temp//world/123} 将world字符串替换为123 unset temp 删除变量 set 列出所有变量 whereis who 搜索who相关的文件（简单快速） locate /etc/sh 查找/tec下所有以sh开头的文件（快而全） locate /user/share/*.jpg 查找/user/share/下所有jpg文件 sudo find /etc/ -name interfaces 在/etc/目录下搜索名字叫做interfaces的文件或者目录 zip -r -q -o shiyanlou.zip /home/shiyanlou 将实验楼打包成一个文件，-r（目录）表示递归但因包含子目录的全部内容，-q表示安静模式，不向屏幕输出信息，-o表示输出文件 du -h shiyanlou.zip 查看打包后的文件大小 unzip shiyanlou.zip 解压到当前目录 unzip -q shiyanlou.zip -d ziptest 解压到ziptest文件夹，若无则自动新建文件夹 unzip -l shiyanlou.zip 不解压，直接查看压缩文件内容 unzip -O GBK shiyanlou.zip 指定编码类型 sudo apt-get update;sudo apt-get install rar unrar 安装rar和unrar工具 tar -cf shiyanlou.tar ~ 创建一个tar包，-c：创建一个tar包文件，-f指定创建的文件名 tar -zcvf something.tar something 打包 tar -zxvf something.tar 解包 tar -xf shiyanlou.tar -C tardir 解包一个文件（-x参数）到指定路径的已存在目录（-c参数） tar -tf shiyanlou.tar 只查看不解包文件-t参数 tar -czf shiyanlou.tar.gz ~创建一个tar.gz压缩文件 tar -cJf shiyanlou.tar.xz ~创建一个tar.xz压缩文件 tar -cjf shiyanlou.tar.bz2 ~创建一个tar.bz2压缩文件 ps aux|grep java 查看java进程 netstat -anp|grep 80 查看80端口的进程 nohup ./start.sh &amp; 启动脚本后台运行并将日志输出到nohup docker ps 列出所有容器信息 docker restart 重启某个镜像 docker exec -ti 进入某个镜像 ./zkCli.sh -server 192.168.0.1:42201 启动服务 ls /dubbo/com.xiaoyu.service/providers/dubbo 查看服务提供者 数据库备份脚本： 12345678910111213#!/bin/shtime=$(date &apos;+%Y%m%d%H%M%S&apos;)mysql_user=sysmysql_password=123456mysqldump -u$&#123;mysql_user&#125; -p$&#123;mysql_password&#125; maoyao | gzip &gt; /home/mysqlbackup/maoyao$&#123;time&#125;.sql.gzcd /home/mysqlbackuprm -rffind . -name&apos;*.sql.gz&apos; -mtime10 #删除10天之前的备份文件#end 设置定时器： crontab -e 00 0 * /home/mysqlbackup/dbbackup.sh #每天的0:00执行一下sh脚本 nginx： 重启：./nginx -s reload]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql相关知识]]></title>
    <url>%2F2018%2F11%2F16%2Fmysql%2F</url>
    <content type="text"><![CDATA[MySQL Server日志四种日志类型 ERROR Log（错误日志） General Query Log（一般查询日志） Binary Log（数据改动日志） Slow Query Log（慢查询SQL语句） 设置log-bin启动mysql服务失败解决方案：加上server-id=1 mysql安全模式有时在使用mysql的批量delete或者update的时候会出现 1Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column To disable safe mode, toggle the option in Preferences -&gt; SQL Queries and reconnect. 原因是因为此时mysql处于安全模式（safe-updates），需要执行命令，即先解除安全模式，待数据更新后再恢复安全模式 123SET SQL_SAFE_UPDATES = 0;update maoyao.user set is_banner=b&apos;0&apos; where is_banner=null;SET SQL_SAFE_UPDATES = 1;]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sharding-jdbc集成springboot]]></title>
    <url>%2F2018%2F11%2F16%2Fmy-blog%2F</url>
    <content type="text"><![CDATA[springboot2.X中使用的spring5，而spring5中已经弃用RelaxedPropertyResolver相关类，而spring-boot-start-sharding相关的包是依赖于RelaxedPropertyResolver的，所以会导致无法启动，只能用sharding-jdbc-core这个包，自己在yml文件里写相关的配置]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
